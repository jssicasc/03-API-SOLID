// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

// Note-Que model é a denominação dada pelo prisma para as estruturas que armazenam dados, cada BD possui uma denominação, mas é bem conhecido como tabela
// O @@ indica configuração a nível de tabela, e apenas 1 @ é a config a nível de campo/coluna
// Cada tabela obrigatoriamente deve ter um campo marcado com o @id, que é o primary key
// Para ids que são publicamente expostos (por ex passado como filtro na própria url) é interessante usar o uuid
// o [] ao final indica que este model se relaciona de 1->N com o model de CheckIn (um usuário pode ter vários check-ins)  
model User {
  id            String    @id @default(uuid())
  name          String
  email         String    @unique
  password_hash String
  role          Role      @default(MEMBER)
  created_at    DateTime  @default(now())
  checkIns      CheckIn[]

  @@map("users")
}

// Uma maneira de verificar se o checkin foi validado é usando a data em vez de um bool, assim obtém-se as 2 informações dentro de apenas uma coluna: Se já foi validado e QUANDO ocorreu a validação 
model CheckIn {
  id           String    @id @default(uuid())
  created_at   DateTime  @default(now())
  validated_at DateTime?

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  gym    Gym    @relation(fields: [gym_id], references: [id])
  gym_id String

  @@map("check_ins")
}

model Gym {
  id          String    @id @default(uuid())
  title       String
  description String?
  phone       String?
  latitude    Decimal
  longitude   Decimal
  checkIns    CheckIn[]

  @@map("gyms")
}
